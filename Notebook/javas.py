# -*- coding: utf-8 -*-
"""JAVAS

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UBfKFidtokB3PCKfURD9MgoYSZaz8Pby

Imported the TensorFlow Library, and entered the Covid Dataset data from Kaggle (https://www.kaggle.com/hemanthhari/symptoms-and-covid-presence/code) which contained 20 indicators / symptoms and the status of COVID-19 patients

Create a dataset as pandas.DataFrame
"""

import tensorflow as tf
from keras.models import Sequential
import pandas as pd
from keras.layers import Dense

data = pd.read_csv('Covid Dataset.csv')

"""Knowing the description of the dataset used. It is known that there are 2 indicators that do not affect the final status, namely "Wearing Masks" and "Sanitization from Market""""

data.describe()

data.info()

"""Removing columns from unnecessary indicators, namely Columns "Wearing Masks" and "Sanitization from Market""""

df_marks = pd.DataFrame(data)
print('Original DataFrame\n--------------')
print(df_marks)

#delete a column
#del df_marks['Wearing Masks']
del df_marks['Sanitization from Market']
print('\n\nDataFrame after deleting column\n--------------')
print(df_marks)

"""Prepare the test and training datasets, dividing the data into 20% for the test data section and 80% for training data """

import numpy as np

labels=data['COVID-19']
features = data.iloc[:,:-1]

from sklearn.model_selection import train_test_split

X=features

y=np.ravel(labels)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""Changing the form of the data type from the initial String to Integer"""

from sklearn.preprocessing import LabelEncoder
e=LabelEncoder()
data=data.apply(e.fit_transform).astype(int)

X_train

data.head()

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler().fit(X_train)

X_train = scaler.transform(X_train)

X_test = scaler.transform(X_test)

"""Conducting training with 3 layers with 100 epoch"""

from keras.models import Sequential
from keras.layers import Dense

model = Sequential()

model.add(Dense(18, activation='relu', input_shape=(18,)))

model.add(Dense(18, activation='relu'))

model.add(Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='sgd',
              metrics=['accuracy'])
                   
model.fit(X_train, y_train,epochs=100, batch_size=1, verbose=1)

model.summary()

"""Here are the weight for each layer web mentions"""

for layer in model.layers:
    weights = layer.get_weights()

"""Knowing the Accuracy and Loss values ​​of test test data"""

score = model.evaluate(X_test, y_test,verbose=1)

print(score)

"""Proof by doing manual input and getting the output according to the input"""

inp=[]
inp=[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
inp=np.array(inp)
#model.predict(reshape(inp))

# Generate predictions for samples
predictions = model.predict(inp.reshape(-1,18))
if predictions ==1:
  print("Positif")
else:
  print("Negative")
print(predictions)

"""Save model to format .H5"""

model_1=model
model_1.save("javas.h5")

"""Convert the .H5 model to tflite so that it can be deployed directly to Android"""

model = tf.keras.models.load_model('/content/javas.h5')
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model=converter.convert()
open("javas.tflite","wb").write(tflite_model)

import tensorflow as tf

from tensorflow.keras import layers
from tensorflow.keras import regularizers

print(tf.__version__)

!pip install git+https://github.com/tensorflow/docs

import tensorflow_docs as tfdocs
import tensorflow_docs.modeling
import tensorflow_docs.plots

from  IPython import display
from matplotlib import pyplot as plt

import numpy as np

import pathlib
import shutil
import tempfile

model = tf.keras.models.load_model('/content/javas.h5')
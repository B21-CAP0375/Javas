# -*- coding: utf-8 -*-
"""NeuralNetwork.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12uzCKwn2xNLm0GkHJrhsRpAKP_HNVGoS
"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
import pandas as pd
import numpy as np
from tensorflow.keras.layers import Dense
from tensorflow.keras import layers
from tensorflow import keras

data = pd.read_csv('/content/Covid Dataset.csv')
data.head()

data.describe()

data.info()

data_marks = pd.DataFrame(data)
print('Original DataFrame\n--------------')
print(data_marks)

#delete a column
#del data_marks['Wearing Masks']
del data_marks['Sanitization from Market']
print('\n\nDataFrame after deleting column\n--------------')
print(data_marks)

# Count samples per class
classes_zero = data[data['COVID-19'] == 'No']
classes_one = data[data['COVID-19'] == 'Yes']

# Print sizes
#print(f'Class 0: {len(classes_zero)}')
#print(f'Class 1: {len(classes_one)}')

# Undersample zero to the size of one
classes_B = classes_one.sample(len(classes_zero))

# Print sizes
#print(f'Class 0: {len(classes_zero)}')
#print(f'Class 1: {len(classes_B)}')

classes_B
classes_C=classes_B.append(classes_zero)

classes_C

from sklearn.preprocessing import LabelEncoder
e=LabelEncoder()
classes_C=classes_C.apply(e.fit_transform).astype(int)

import numpy as np

labels=classes_C.iloc[:,18].values
features = classes_C.iloc[:,0:18].values

from sklearn.model_selection import train_test_split

X=features

y=labels

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) 
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from keras import regularizers


model = Sequential()

model.add(Dense(10, activation='relu', input_shape=(18,)))
model.add(keras.layers.Dropout(0.4))
model.add(Dense(10, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='sgd',
              metrics=['accuracy'])
                   
history = model.fit(X_train, y_train, epochs=100, batch_size=1, validation_data=(X_val, y_val))

import matplotlib.pyplot as plt
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.plot(epochs, acc, 'r', label='Training accuracy')
plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy')
plt.legend(loc=0)
plt.figure()


plt.show()

score = model.evaluate(X_test, y_test,verbose=1)

print(score)

inp=[]
inp=[1,1,1,1,1,0,0,0,0,1,1,1,1,0,1,0,1,1] 
inp=np.array(inp)
#model.predict(reshape(inp))

# Generate predictions for samples
predictions = model.predict(inp.reshape(-1,18))

print(predictions)

from tensorflow import lite
converter = lite.TFLiteConverter.from_keras_model(model)

tfmodel = converter.convert()

open('COOVID-19.tflite', 'wb').write(tfmodel)